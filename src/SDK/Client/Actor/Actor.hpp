#pragma once

class Actor {
public:


virtual void resetUserPos(bool);
virtual void getOwnerEntityType(void);
virtual void remove(void);
//virtual void setPos(Vec3 const&);
virtual bool isRuntimePredictedMovementEnabled(void);
virtual void getPredictedMovementValues(void);
virtual void getPosition(void);
virtual void getPosPrev(void);
virtual void getPosExtrapolated(float);
//virtual void getAttachPos(ActorLocation,float);
virtual void getFiringPos(void);
//virtual void move(Vec3 const&);
//virtual void move(IActorMovementProxy &,Vec3 const&);
virtual void getInterpolatedRidingPosition(float);
virtual void getInterpolatedBodyRot(float);
virtual void getInterpolatedHeadRot(float);
virtual void getInterpolatedBodyYaw(float);
virtual void getYawSpeedInDegreesPerSecond(void);
virtual void getInterpolatedWalkAnimSpeed(float);
virtual void getInterpolatedRidingOffset(float,int);
virtual void resetInterpolated(void);
//virtual void updateEntityInside(AABB const&);
virtual void updateEntityInside(void);
virtual bool isFireImmune(void);
virtual void breaksFallingBlocks(void);
//virtual void blockedByShield(ActorDamageSource const&,Actor&);
virtual bool canDisableShield(void);
//virtual void teleportTo(Vec3 const&,bool,int,int,bool);
//virtual void tryTeleportTo(Vec3 const&,bool,bool,int,int);
//virtual void chorusFruitTeleport(Vec3 const&);
//virtual void lerpMotion(Vec3 const&);
virtual void tryCreateAddActorPacket(void);
virtual void normalTick(void);
virtual void baseTick(void);
virtual void passengerTick(void);
virtual void positionPassenger(Actor&,float);
virtual void startRiding(Actor&);
virtual void addPassenger(Actor&);
virtual void flagPassengerToRemove(Actor&);
//virtual void getExitTip(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const&,InputMode,NewInteractionModel);
virtual void getEntityLocNameString(void);
//virtual void intersects(Vec3 const&,Vec3 const&);
virtual bool isInWall(void);
virtual bool isInvisible(void);
virtual bool canShowNameTag(void);
virtual bool canExistInPeaceful(void);
virtual void setNameTagVisible(bool);
virtual void getNameTag(void);
virtual void getNameTagAsHash(void);
virtual void getFormattedNameTag(void);
//virtual void filterFormattedNameTag(UIProfanityContext const&);
//virtual void setNameTag(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const&);
virtual void getAlwaysShowNameTag(void);
//virtual void setScoreTag(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> const&);
virtual void getScoreTag(void);
virtual bool isInWater(void);
//virtual bool isInLava(IConstBlockSource const&);
//virtual bool isUnderLiquid(MaterialType);
virtual bool isOverWater(void);
//virtual void setBlockMovementSlowdownMultiplier(BlockLegacy const&,Vec3 const&);
virtual void resetBlockMovementSlowdownMultiplier(void);
virtual void getCameraOffset(void);
virtual void getShadowHeightOffs(void);
virtual void getShadowRadius(void);
virtual void getHeadLookVector(float);
virtual bool canSeeInvisible(void);
//virtual bool canSee(Actor const&);
//virtual bool canSee(Vec3 const&);
virtual bool canInteractWithOtherEntitiesInGame(void);
virtual bool isSkyLit(float);
//virtual void getBrightness(float,IConstBlockSource const&);
virtual void interactPreventDefault(void);
//virtual void playerTouch(Player &);
virtual void onAboveBubbleColumn(bool);
virtual void onInsideBubbleColumn(bool);
virtual bool isImmobile(void);
virtual bool isSilent(void);
virtual bool isSilentObserver(void);
virtual bool isPickable(void);
virtual bool isFishable(void);
virtual bool isSleeping(void);
virtual void setSleeping(bool);
virtual bool isShootable(void);
virtual void setSneaking(bool);
virtual bool isBlocking(void);
//virtual bool isDamageBlocked(ActorDamageSource const&);
virtual bool isAlive(void);
virtual bool isOnFire(void);
virtual bool isOnHotBlock(void);
virtual bool isCreativeModeAllowed(void);
virtual bool isSurfaceMob(void);
virtual bool isTargetable(void);
virtual bool isLocalPlayer(void);
virtual bool isRemotePlayer(void);
virtual bool isPlayer(void);
virtual bool isAffectedByWaterBottle(void);
virtual bool canAttack(Actor*,bool);
virtual void setTarget(Actor*);
virtual bool isValidTarget(Actor*);
//virtual void attack(Actor&,ActorDamageCause const&);
virtual void performRangedAttack(Actor&,float);
virtual void getEquipmentCount(void);
//virtual void setOwner(ActorUniqueID);
virtual void setSitting(bool);
virtual void onTame(void);
virtual void onFailedTame(void);
virtual void getInventorySize(void);
virtual void getEquipSlots(void);
virtual void getChestSlots(void);
virtual void setStanding(bool);
virtual bool canPowerJump(void);
virtual void setCanPowerJump(bool);
virtual bool isEnchanted(void);
//virtual void vehicleLanded(Vec3 const&,Vec3 const&);
virtual void shouldRender(void);
virtual void playAmbientSound(void);
virtual void getAmbientSound(void);
//virtual bool isInvulnerableTo(ActorDamageSource const&);
//virtual void getBlockDamageCause(Block const&);
virtual void animateHurt(void);
virtual void doFireHurt(int);
virtual void onLightningHit(void);
//virtual void onBounceStarted(BlockPos const&,Block const&);
virtual void feed(int);
//virtual void handleEntityEvent(ActorEvent,int);
virtual void getPickRadius(void);
virtual void getActorRendererId(void);
virtual void spawnAtLocation(int,int);
virtual void spawnAtLocation(int,int,float);
//virtual void spawnAtLocation(ItemStack const&,float);
virtual void despawn(void);
virtual void killed(Actor&);
virtual void awardKillScore(Actor&,int);
//virtual void setArmor(ArmorSlot,ItemStack const&);
//virtual void getArmor(ArmorSlot);
virtual void getAllArmor(void);
//virtual void getArmorMaterialTypeInSlot(ArmorSlot);
//virtual void getArmorMaterialTextureTypeInSlot(ArmorSlot);
//virtual void getArmorColorInSlot(ArmorSlot,int);
//virtual void getEquippedSlot(EquipmentSlot);
//virtual void setEquippedSlot(EquipmentSlot,ItemStack const&);
//virtual void setCarriedItem(ItemStack const&);
virtual void getCarriedItem(void);
//virtual void setOffhandSlot(ItemStack const&);
virtual void getEquippedTotem(void);
virtual void consumeTotem(void);
//virtual void save(CompoundTag &);
//virtual void saveWithoutId(CompoundTag &);
//virtual void load(CompoundTag const&,DataLoadHelper &);
//virtual void loadLinks(CompoundTag const&,std::vector<ActorLink,std::allocator<ActorLink>> &,DataLoadHelper &);
virtual void getEntityTypeId(void);
virtual void queryEntityRenderer(void);
virtual void getSourceUniqueID(void);
virtual void thawFreezeEffect(void);
virtual bool canFreeze(void);
virtual bool isWearingLeatherArmor(void);
//virtual void getLiquidAABB(MaterialType);
//virtual void handleInsidePortal(BlockPos const&);
virtual void getPortalCooldown(void);
virtual void getPortalWaitTime(void);
virtual bool canChangeDimensionsUsingPortal(void);
//virtual void changeDimension(AutomaticID<Dimension,int>);
//virtual void changeDimension(ChangeDimensionPacket const&);
virtual void getControllingPlayer(void);
virtual void checkFallDamage(float,bool);
//virtual void causeFallDamage(float,float,ActorDamageSource);
virtual void handleFallDistanceOnServer(float,float,bool);
//virtual void playSynchronizedSound(LevelSoundEvent,Vec3 const&,Block const&,bool);
//virtual void playSynchronizedSound(LevelSoundEvent,Vec3 const&,int,bool);
virtual void onSynchedFlagUpdate(int,long,long);
virtual void onSynchedDataUpdate(int);
virtual bool canAddPassenger(Actor&);
//virtual bool canPickupItem(ItemStack const&);
virtual bool canBePulledIntoVehicle(void);
virtual void inCaravan(void);
virtual bool isLeashableType(void);
virtual void tickLeash(void);
virtual void sendMotionPacketIfNeeded(void);
virtual bool canSynchronizeNewEntity(void);
virtual void stopRiding(bool,bool,bool);
virtual void startSwimming(void);
virtual void stopSwimming(void);
//virtual void buildDebugInfo(std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>> &);
virtual void getCommandPermissionLevel(void);
virtual bool isClientSide(void);
//virtual void getMutableAttribute(Attribute const&);
//virtual void getAttribute(Attribute const&);
virtual void getDeathTime(void);
virtual void heal(int);
virtual bool isInvertedHealAndHarm(void);
//virtual bool canBeAffected(uint);
//virtual bool canBeAffectedByArrow(MobEffectInstance const&);
//virtual void onEffectAdded(MobEffectInstance &);
//virtual void onEffectUpdated(MobEffectInstance &);
//virtual void onEffectRemoved(MobEffectInstance &);
virtual bool canObstructSpawningAndBlockPlacement(void);
virtual void getAnimationComponent(void);
//virtual void openContainerComponent(Player &);
virtual void swing(void);
//virtual void useItem(ItemStackBase &,ItemUseMethod,bool);
//virtual bool hasOutputSignal(uchar);
virtual void getOutputSignal(void);
//virtual void getDebugText(std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>,std::allocator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char>>>> &);
virtual void getMapDecorationRotation(void);
virtual void getPassengerYRotation(Actor const&);
virtual bool isWorldBuilder(void);
virtual bool isCreative(void);
virtual bool isAdventure(void);
virtual bool isSurvival(void);
virtual bool isSpectator(void);
virtual bool isAttackableGamemode(void);
//virtual void add(ItemStack &);
//virtual void drop(ItemStack const&,bool);
//virtual void getInteraction(Player &,ActorInteraction &,Vec3 const&);
//virtual bool canDestroyBlock(Block const&);
virtual void setAuxValue(int);
virtual void setSize(float,float);
virtual void onOrphan(void);
virtual void wobble(void);
virtual void wasHurt(void);
virtual void startSpinAttack(void);
virtual void stopSpinAttack(void);
virtual void setDamageNearbyMobs(bool);
//virtual void renderDebugServerState(Options const&);
virtual void reloadLootTable(void);
//virtual void reloadLootTable(EquipmentTableDefinition const&);
virtual void getDeletionDelayTimeSeconds(void);
virtual void kill(void);
//virtual void die(ActorDamageSource const&);
virtual void shouldDropDeathLoot(void);
virtual void shouldTick(void);
//virtual void applySnapshot(EntityContext const&,EntityContext const&);
virtual void getNextStep(float);
virtual void getLootTable(void);
virtual void onPush(Actor&);
virtual void getLastDeathPos(void);
virtual void getLastDeathDimension(void);
virtual bool hasDiedBefore(void);
virtual void doWaterSplashEffect(void);
//virtual void _shouldProvideFeedbackOnHandContainerItemSet(HandSlot,ItemStack const&);
//virtual void _shouldProvideFeedbackOnArmorSet(ArmorSlot,ItemStack const&);
//virtual void updateEntitySpecificMolangVariables(RenderParams &);
virtual void shouldTryMakeStepSound(void);
virtual bool canMakeStepSound(void);
//virtual void _hurt(ActorDamageSource const&,float,bool,bool);
virtual void markHurt(void);
//virtual void _getAnimationComponent(std::shared_ptr<AnimationComponent> &,AnimationComponentGroupType);
//virtual void readAdditionalSaveData(CompoundTag const&,DataLoadHelper &);
//virtual void addAdditionalSaveData(CompoundTag &);
//virtual void _playStepSound(BlockPos const&,Block const&);
//virtual void _playFlySound(BlockPos const&,Block const&);
virtual void _makeFlySound(void);
virtual void checkInsideBlocks(float);
//virtual void pushOutOfBlocks(Vec3 const&);
virtual void spawnTrailBubbles(void);
virtual void updateInsideBlock(void);
//virtual void _removePassenger(ActorUniqueID const&,bool,bool,bool);
virtual void _onSizeUpdated(void);
virtual void _doAutoAttackOnTouch(Actor&);


};